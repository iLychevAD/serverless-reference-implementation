steps:

# # Restore
# - task: DotNetCoreCLI@2
#   displayName: Restore
#   inputs:
#     command: restore
#     projects: '**/DroneStatus/dotnet/**/*.csproj'

# # Build
# - task: DotNetCoreCLI@2
#   displayName: Build
#   inputs:
#     projects: '**/DroneStatus/dotnet/**/*.csproj'
#     arguments: '--configuration $(BuildConfiguration)'

# Build
- script: |
    bash deployment-scripts/build-function-apps.sh
  displayName: 'Build FunctionApp in a tmp Docker contr'
  name: build-in-docker

# Run tests
- task: DotNetCoreCLI@2
  displayName: Run tests for DroneStatus
  inputs:
    command: test

    projects: '**/DroneStatus/dotnet/**.Tests/*.csproj'

    publishTestResults: true

    arguments: '--configuration Release'

  enabled: true

# # Publish
# - task: DotNetCoreCLI@2
#   displayName: Publish
#   inputs:
#     command: publish

#     publishWebProjects: false

#     projects: '**/DroneStatus/dotnet/DroneStatusFunctionApp/*.csproj'

#     arguments: '--configuration $(BuildConfiguration) --output $(build.artifactstagingdirectory)'

#     zipAfterPublish: True

# Publish Artifacts
- task: PublishBuildArtifacts@1
  displayName: 'Publish Artifacts'
  inputs:
    PathtoPublish: 'built' #'$(build.artifactstagingdirectory)'
